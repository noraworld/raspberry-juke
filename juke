#!/bin/bash

# Raspberry **Pi** Juke**box**
NOW_PLAYING_FILEPATH="$HOME/.pibox_np"
SOUND_DIRECTORY="$HOME/.pibox"

play_sound() {
  # On iOS Shortcuts (Run script over SSH), The following command does
  # not end until the sound source ends even though running in the background
  #
  #   play -q ~/sleep.mp3 &
  #
  # I don't know why it does not go well, and also don't know the
  # following goes well
  #
  #   play ~/sleep.mp3 > /dev/null 2>&1 &
  #
  # cf. https://askubuntu.com/questions/176038/how-can-i-play-a-song-in-the-background-via-my-command-line#answer-1025636
  #

  for h in $(seq 1 "$TIMES"); do
    for i; do
      play --volume "$VOLUME" "$i"
      echo "$i" >> "$NOW_PLAYING_FILEPATH"
      VOLUME=$(echo "$VOLUME" + "$GRADUAL" | bc)
      [ "$(echo "$VOLUME >= $MAX" | bc)" = 1 ] && VOLUME="$MAX"
    done
  done
}

stop_sound() {
  if [ "$1" = "all" ]; then
    stop_filename="$(sort "$NOW_PLAYING_FILEPATH" | uniq | xargs echo)"
  else
    stop_filename="$@"
  fi

  for i in $stop_filename; do
    if [ "$(grep -e "play" -e "$i" -e "juke" <(ps aux) | grep -v "grep" | grep -v "juke stop")" ]; then
      grep -e "play" -e "$i" -e "juke" <(ps aux) | grep -v "grep" | grep -v "juke stop" | awk '{ print $2 }' | xargs kill -9
      sed -i "s!$i!!g" "$NOW_PLAYING_FILEPATH"
      sed -i '/^\s*$/d' "$NOW_PLAYING_FILEPATH"
    else
      echo "Error: $i: No such music played" >&2
    fi
  done
}

sync_file() {
  while read filename
  do
    if ! [ "$(grep -e "play" -e "$filename" <(ps aux) | grep -v grep)" ]; then
      sed -i "s!$filename!!g" "$NOW_PLAYING_FILEPATH"
      sed -i '/^\s*$/d' "$NOW_PLAYING_FILEPATH"
    fi
  done < "$NOW_PLAYING_FILEPATH"
}

setup() {
  [ -e "$NOW_PLAYING_FILEPATH" ] || touch "$NOW_PLAYING_FILEPATH"
  [ -e "$SOUND_DIRECTORY" ] || mkdir "$SOUND_DIRECTORY"
  [ "$GRADUAL" = "" ] && GRADUAL="0.0"
  [ "$MAX" = "" ] && MAX="1.0"
  [ "$TIMES" = "" ] && TIMES="1"
  [ "$TIMES" = "infinite" ] && TIMES="65536"
  [ "$VOLUME" = "" ] && VOLUME="1.0"
}

main() {
  parse "$@"
  eval "set -- $REST"

  setup

  if [ "$#" -eq 0 ]; then
    echo "Error: Wrong number of argument (at least 1)" >&2
    exit 1
  fi

  cmd=$1
  shift

  sync_file

  case $cmd in
    "play")
      play_sound "$@" > /dev/null 2>&1 &
      ;;
    "stop")
      stop_sound "$@"
      ;;
    *)
      echo "Error: Invalid command (argument 1)" >&2
      exit 1
      ;;
  esac
}

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: juke [options]... [arguments]..." ''
  msg -- 'Options:'
  param   GRADUAL    --gradual -- "volume increases by specified value every time as it is played continuously"
  param   MAX        --max     -- "set max volume"
  param   TIMES      --times   -- "how many times to play sound in a row (set 'infinite' for a value to play infinitely)"
  param   VOLUME     --volume  -- "adjust volume (valid value is between 0 - 1)"
  disp    :usage  -h --help
  disp    VERSION    --version
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
GRADUAL=''
MAX=''
TIMES=''
VOLUME=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[h]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '--gradual')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        GRADUAL="$OPTARG"
        shift ;;
      '--max')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        MAX="$OPTARG"
        shift ;;
      '--times')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        TIMES="$OPTARG"
        shift ;;
      '--volume')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        VOLUME="$OPTARG"
        shift ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: juke [options]... [arguments]...

Options:
      --gradual GRADUAL       volume increases by specified value every time as it is played continuously
      --max MAX               set max volume
      --times TIMES           how many times to play sound in a row (set 'infinite' for a value to play infinitely)
      --volume VOLUME         adjust volume (valid value is between 0 - 1)
  -h, --help
      --version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
